import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        ListaAlunos lista = new ListaAlunos();

        int respostaMenu = 0;

        while (respostaMenu != 5) {
            System.out.println("\nGerenciamento de Alunos:");
            System.out.println("1 - Cadastrar aluno");
            System.out.println("2 - Remover aluno");
            System.out.println("3 - Mostrar todos os alunos");
            System.out.println("4 - Buscar aluno por RGM");
            System.out.println("5 - Sair do programa");

            System.out.print("Digite sua resposta: ");
            respostaMenu = input.nextInt();

            switch (respostaMenu) {
                case 1:
                    if (lista.ListaCheia()) {
                        System.out.println("A lista está cheia!");
                    } else {
                        matricularAluno(lista);
                    }
                    break;

                case 2:
                    apagarContato(lista);
                    break;

                case 3:
                    lista.imprimirLista();
                    System.out.println("\n---------------------------------");
                    break;

                case 4:
                    System.out.println("Digite o RGM do aluno a ser encontrado:");
                    int numero = input.nextInt();
                    input.nextLine();
                    boolean encontrado = false;

                    for (int i = 0; i < lista.tamanho; i++) {
                        if (lista.items[i].rgm == numero) {
                            System.out.println(lista.items[i]);
                            encontrado = true;
                            break;
                        }
                    }

                    if (!encontrado) {
                        System.out.println("RGM não encontrado!");
                    }
                    break;

                case 5:
                    System.out.println("Saindo do programa...");
                    break;

                default:
                    System.out.println("Opção inválida, tente novamente.");
                    break;
            }
        }
    }

    //--------------------------- APAGAR CONTATO ---------------------------------
    public static void apagarContato(ListaAlunos lista) {
        Scanner input = new Scanner(System.in);

        int resposta;
        do {
            System.out.println("\nEscolha uma das opções:");
            System.out.println("1 - Cancelar matrícula");
            System.out.println("2 - Exibir lista de alunos atualizada");
            System.out.println("3 - Voltar");

            resposta = input.nextInt();
            input.nextLine();

            switch (resposta) {
                case 1:
                    System.out.println("Digite o RGM do aluno a ser apagado: ");
                    int rgm = input.nextInt();
                    input.nextLine();

                    boolean encontrado = false;
                    for (int i = 0; i < lista.tamanho; i++) {
                        if (lista.items[i] != null && lista.items[i].rgm == rgm) {
                            lista.items[i] = null;
                            encontrado = true;
                            break;
                        }
                    }

                    if (!encontrado) {
                        System.out.println("RGM não encontrado!");
                    } else {
                        ordenarArray(lista);
                        lista.tamanho--; // reduz o tamanho
                        System.out.println("Aluno removido com sucesso.");
                    }
                    break;

                case 2:
                    lista.imprimirLista();
                    break;

                case 3:
                    System.out.println("Voltando...");
                    break;

                default:
                    System.out.println("Opção inválida, tente novamente.");
                    break;
            }

        } while (resposta != 3);
    }

    //------------------------------- MATRICULAR ALUNO ---------------------------------
    public static void matricularAluno(ListaAlunos lista) {
        Scanner input = new Scanner(System.in);

        while (true) {
            System.out.println("\nDigite o RGM do aluno: ");
            int rgm = input.nextInt();
            input.nextLine();

            System.out.println("Digite o nome do aluno: ");
            String nome = input.nextLine();

            Cadastro aluno = new Cadastro(rgm, nome);

            while (true) {
                System.out.println("Digite o nome da disciplina: ");
                String nomeDisciplina = input.nextLine();

                System.out.println("Digite a nota do aluno na disciplina: ");
                double nota = input.nextDouble();
                input.nextLine();

                aluno.adicionarDisciplina(nomeDisciplina, nota);

                System.out.println("Deseja adicionar mais disciplinas? (S/N)");
                String respostaDisc = input.nextLine();
                if (respostaDisc.equalsIgnoreCase("N")) {
                    break;
                }
            }

            if (lista.adicionar(aluno)) {
                System.out.println("Aluno adicionado com sucesso!");
            }

            System.out.println("Deseja adicionar mais alunos? (S/N): ");
            String respostaAluno = input.nextLine();
            if (respostaAluno.equalsIgnoreCase("N")) {
                break;
            }
        }
    }

    //------------------------------ ORDENAR O ARRAY --------------------------------
    public static void ordenarArray(ListaAlunos lista) {
        int posicaoLivre = 0;

        // Empurra os nulos para o final
        for (int i = 0; i < lista.items.length; i++) {
            if (lista.items[i] != null) {
                lista.items[posicaoLivre] = lista.items[i];
                if (posicaoLivre != i) {
                    lista.items[i] = null;
                }
                posicaoLivre++;
            }
        }

        // Ordena por RGM (algoritmo simples)
        for (int i = 0; i < posicaoLivre - 1; i++) {
            for (int j = i + 1; j < posicaoLivre; j++) {
                if (lista.items[i].rgm > lista.items[j].rgm) {
                    Cadastro temp = lista.items[i];
                    lista.items[i] = lista.items[j];
                    lista.items[j] = temp;
                }
            }
        }
    }
}

//------------------------------ CLASSES AUXILIARES --------------------------------
class Disciplinas {
    String nome;
    Double nota;
    Disciplinas proxima;

    public Disciplinas(String nome, Double nota) {
        this.nome = nome;
        this.nota = nota;
        this.proxima = null;
    }

    @Override
    public String toString() {
        return nome + " - " + nota;
    }
}

class Cadastro {
    int rgm;
    String nome;
    Disciplinas primeiraDisciplina;

    public Cadastro(int rgm, String nome) {
        this.rgm = rgm;
        this.nome = nome;
        this.primeiraDisciplina = null;
    }

    public void adicionarDisciplina(String nomeDisciplina, Double nota) {
        Disciplinas novaDisciplina = new Disciplinas(nomeDisciplina, nota);

        if (primeiraDisciplina == null) {
            primeiraDisciplina = novaDisciplina;
        } else {
            Disciplinas atual = primeiraDisciplina;
            while (atual.proxima != null) {
                atual = atual.proxima;
            }
            atual.proxima = novaDisciplina;
        }
    }

    @Override
    public String toString() {
        StringBuilder resultado = new StringBuilder();
        resultado.append("---------------------------------\n")
                .append("Cadastro - ")
                .append("RGM: ").append(rgm)
                .append(", Nome: ").append(nome);

        if (primeiraDisciplina != null) {
            resultado.append("\nDisciplinas:\n");
            Disciplinas atual = primeiraDisciplina;
            while (atual != null) {
                resultado.append("  ").append(atual).append("\n");
                atual = atual.proxima;
            }
        }
        return resultado.toString();
    }
}

class ListaAlunos {
    public Cadastro[] items;
    public int tamanho;
    private static final int CAPACIDADE_MAXIMA = 60;

    public ListaAlunos() {
        this.items = new Cadastro[CAPACIDADE_MAXIMA];
        this.tamanho = 0;
    }

    public boolean adicionar(Cadastro aluno) {
        if (tamanho >= CAPACIDADE_MAXIMA) {
            System.out.println("A lista está cheia!");
            return false;
        }

        int posicao = 0;
        while (posicao < tamanho && items[posicao].rgm < aluno.rgm) {
            posicao++;
        }

        for (int i = tamanho; i > posicao; i--) {
            items[i] = items[i - 1];
        }

        items[posicao] = aluno;
        tamanho++;
        return true;
    }

    public boolean ListaCheia() {
        return tamanho >= CAPACIDADE_MAXIMA;
    }

    public void imprimirLista() {
        if (tamanho == 0) {
            System.out.println("Nenhum aluno está cadastrado.");
            return;
        }
        for (int i = 0; i < tamanho; i++) {
            System.out.println(items[i]);
        }
    }
}
